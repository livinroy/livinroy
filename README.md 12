import java.util.*;

public class ArrayQueue {

    protected int capacity;
    protected int[] queue;
    protected int front = -1;
    protected int rear = -1;

    public ArrayQueue(int cap) {
        capacity = cap;
        queue = new int[capacity];
    }

    public int size() {
        return (rear - front);
    }

    public void enQueue(int data) {
        if (isFull())
            System.out.println("Queue is Overflow. Not possible to insert in Full Queue");
        else {
            queue[++rear] = data;
            System.out.println("Element is inserted");
        }
    }

    public int deQueue() {
        int data = -1;
        if (isEmpty())
            System.out.println("Queue is Underflow. No elements to be deleted in Empty Queue");
        else {
            data = queue[++front];
        }
        return data;
    }

    public boolean isFull() {
        return (size() == capacity);
    }

    public boolean isEmpty() {
        return (front == rear);
    }

    public void display() {
        if (isEmpty())
            System.out.println("Queue is Underflow. No elements to display in Empty Queue");
        else {
            System.out.println("Queue Elements");
            for (int i = front + 1; i <= rear; i++)
                System.out.print(queue[i] + "\t");
            System.out.println();
        }
    }

    public static void main(String[] args) {
        ArrayQueue q = new ArrayQueue(5);
        Scanner sc = new Scanner(System.in);
        int data, ch;

        do {
            System.out.println("1.EnQueue");
            System.out.println("2.DeQueue");
            System.out.println("3.Display Queue");
            System.out.println("4.Exit");
            System.out.println("Enter your choice:");
            ch = sc.nextInt();

            switch (ch) {
                case 1:
                    System.out.println("Enter the element to insert:");
                    data = sc.nextInt();
                    q.enQueue(data);
                    break;

                case 2:
                    data = q.deQueue();
                    if (data != -1)
                        System.out.println("Deleted Element:" + data);
                    break;

                case 3:
                    q.display();
                    break;
            }
        } while (ch < 4);
    }
        }
